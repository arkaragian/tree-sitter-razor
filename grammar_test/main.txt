==========================
Code blocks
==========================

@{
  int x = 123;
  string y = "because.";
}

---

(document (interpolated_code_block
  (variable_declaration (type_specifier (identifier)) (identifier) (number))
  (variable_declaration (type_specifier (identifier)) (identifier) (string))))

===========================
Expressions (HTML-encoded)
===========================

<span>@model.Message</span>

---

(document
  (tag
    (open_tag)
    (interpolated_expression (simple_member_expression (identifier) (identifier)))
    (close_tag)))

=======================
Expressions (Unencoded)
=======================

<span>
@Html.Raw(model.Message)
</span>

---

(document
  (tag
    (open_tag)
    (interpolated_expression (simple_call_expression
      (simple_member_expression (identifier) (identifier))
      (member_expression (identifier) (identifier))))
    (close_tag)))

=======================
Mixing code and plain text
=======================

@if (x) {
  var name = "Frank";
  <text>Hello, @name</text>
}

---

(document
  (interpolated_if_statement (identifier)
    (variable_declaration
      (type_specifier)
      (identifier)
      (string))
    (tag
      (open_tag)
      (interpolated_expression (identifier))
      (close_tag))))

========================================
Explicit expressions
========================================

<span>ISBN@(isbnNumber)</span>

---

(document
  (tag
    (open_tag)
    (interpolated_expression (identifier))
    (close_tag)))

======================================
Transitions between code and markup
=====================================

<ul>
  @while (a.b) {
    <li>
      @if (c.d) {
        <span>big</span>
      }
    </li>
  }
</ul>

---

(document
  (tag
    (open_tag)
    (interpolated_while_statement
      (member_expression (identifier) (identifier))
      (tag
        (open_tag)
        (interpolated_if_statement
          (member_expression (identifier) (identifier))
          (tag (open_tag) (close_tag)))
        (close_tag)))
    (close_tag)))
